import sqlalchemy.types as dtype

##### DO NOT EDIT THIS FILE #####
# (The "default" file is reserved for special behavior, if you'd like to use different settings then create a new config file)


# dtypes can be empty but then whatever default is given by pandas is used for sql dtypes

config_dict = {
    "tables": {
        "title": {
            "dtypes": {"movieID": dtype.String(50)},
            "values": {
                # imdb_dataset_value_column : new_column_name
                "tconst": "movieID",
                "titleType": "titleType",
                "genres": "genres",
            },
        },
        "bruhtable": {
            "values": {
                # imdb_dataset_value_column : new_column_name
                "tconst": "movieID",
                "titleType": "titleType",
                "genres": "genres",
                "runtimeMinutes": "runtimeMinutes",
            }
        },
    },
    "settings": {
        "blocked_genres": ["Horror", "Musical"],
        "blocked_titletypes": ["short", "video", "tvEpisode"],
        "database": {
            "host": "localhost",
            "port": 3306,
            "user": "root",
            "password": "1234",
            "database": "dataset_sql",
        },
        # split the comma separated genres string and convert it to an int with a lookup table
        "is_split_genres_into_reftable": True,
        # convert to int for lookup table creation
        "is_convert_title_type_str_to_int": False,
        "is_remove_adult": True,
        "use_streaming": True,
        "is_ignore_db_has_tables_warning": True,
    },
}


# for loop of values
# if dtypes.get(values.key)
# add dtype
# else
# dont
